<%= content_for :scripts do %>         
  <script type="text/javascript" src='/lib3D/Three/Three.js'> </script>
  <script type="text/javascript" src="/lib3D/Three/OBJLoader.js"> </script>
  <script type="text/javascript" src="/lib3D/Three/Detector.js" > </script>
  <script type="text/javascript" src="/lib3D/Three/Stats.js" > </script>
  <script type="text/javascript" src="/lib3D/3D-build.js" > </script>
  <script type="text/javascript">
    var front_mesh, back_mesh;
    var style_id, texture_id;
    var texture_file;
    var front_image = new Image();
    var front_ctx, back_ctx;
    var front_canvas, back_canvas;
    var image_canvas, image_ctx;
    var filter_canvas, filter_ctx, imgData;
    
    function changeTexture(img){
    	front_image.src = img;
      resetPixel();
      
    	front_x = 0;
      front_y = 0;
      back_x = 0;
      back_y = 0;
    }
    
    function changeModel(obj1, obj2) {
    	scene.remove(front);
    	scene.remove(back);
    	front = new THREE.Object3D();
    	back = new THREE.Object3D();
    	
    	loadModel(front,obj1);
    	loadModel(back,obj2);
    	
    	scene.add(front);
    	scene.add(back);
    }
    
    function update_texture(file) {
      changeTexture(file);
      $('#design-texture').val(texture_id);
      show_save_button();
    }
    function update_style() {
      changeModel(front_mesh, back_mesh);
      $('#design-form').val(style_id);
      show_save_button();
    }
    
    function show_save_button() {
      $('#save-button').show();
      $('#design-title').show();
    }
  
    $(function() {
      $("#texture_image").on('change', function() {
        if ($("#texture_image").val() != "") {
          $('#new_texture span').html($("#texture_image").val());
          console.log('uploading texture');
          $("#loading").show();
          
          $('#new_texture').submit();
        } else {
          $('#new_texture span').html('Use your own photo or image');
        }
      })
      
      $("#upload-button").click(function(){
        console.log('upload clicked');
        $("#loading").show();
        
        $("#texture_image").click();
      })
      
      $('.style img').click(function() {
        $('.style .selected').removeClass('selected');
        $(this).addClass('selected');
        
        style_id = $(this).data('form-id');
        front_mesh = $(this).data('mesh-front');
        back_mesh = $(this).data('mesh-back');
        
        update_style();
      });
      
      $('.texture-option').live('click', function() {
        $("#loading").show();
        
        $('.selected-texture').removeClass('selected-texture');
        $(this).addClass('selected-texture');
        texture_file = $(this).data('img');
        
        texture_id=$(this).data('texture-id');
        update_texture(texture_file);
      });
      
      $('.recent-design').live('click', function() {
        $('.selected-design').removeClass('selected-design');
        $(this).parent().addClass('selected-design');
        front_mesh = $(this).data('mesh-front');
        back_mesh = $(this).data('mesh-back');
        texture_file = $(this).data('texture-file');
        
        if ($(this).data('form-id') != $('#design-form').val()) {
          style_id = $(this).data('form-id');
          update_style();
        } 
        
        if ($(this).data('frontx')) {
          console.log("mapped");
          front_x = $(this).data('frontx')*front_image.width*-1;
          front_y = $(this).data('fronty')*front_image.height*-1;
          back_x = $(this).data('backx')*front_image.width*-1;
          back_y = $(this).data('backy')*front_image.height*-1;
        } else {
          front_x = 0;
          front_y = 0;
          back_x = 0;
          back_y = 0;
        }
        front_image.src = texture_file;
        loadModelCanvas(front, front_canvas);
        loadModelCanvas(back, back_canvas);
        
      });
      
      $('#save-button').click(function() {
        front.rotation.y = 0;
        back.rotation.y = 0;
        setTimeout(function() {
           
          var designrender = $('#GL')[0].toDataURL("image/png");
          $('#design-preview').val(designrender);
          $('#design-texture').val(texture_id);
          $('#design-form').val(style_id);
          
          var frontimg = front_canvas.toDataURL("image/png");
          var backimg = back_canvas.toDataURL("image/png");
          $('#design-front-texture').val(frontimg);
          $('#design-back-texture').val(backimg);
          
          //we set the x,y coords normalized relative to the image
          $('#design-front-x').val(-1*front_x/front_image.width);
          $('#design-front-y').val(-1*front_y/front_image.height);
          $('#design-back-x').val(-1*back_x/front_image.width);
          $('#design-back-y').val(-1*back_y/front_image.height);
          
          $('#filter-name').val($('input[name=filter]:checked').val());
          var parameters = "filter-size: "+ $("#pixel-slider").slider('value')+ ",";
          $('#filter-params').val(parameters);
          
          var designdiv = document.createElement('div');
          designdiv.setAttribute('class', 'recent-design-group');
          var newdesign = document.createElement("img");  
          newdesign.src = designrender;
          newdesign.setAttribute('class','recent-design');
          newdesign.setAttribute('data-texture-id', texture_id);
          newdesign.setAttribute('data-texture-file', texture_file);
          newdesign.setAttribute('data-mesh-front', front_mesh);
          newdesign.setAttribute('data-mesh-back', back_mesh);
          newdesign.setAttribute('data-form-id', style_id);
          newdesign.setAttribute('data-frontx', -1*front_x/front_image.width);
          newdesign.setAttribute('data-fronty', -1*front_y/front_image.height);
          newdesign.setAttribute('data-backx', 1*back_x/front_image.width);
          newdesign.setAttribute('data-backy', 1*back_y/front_image.height);
          
          designdiv.appendChild(newdesign);
          $("#my-closet").prepend(designdiv);
          
          $("#new_design").submit();
        
        },100);
      });
      
      $('#upload-image-button').click(function(){
        $("#loading").show();
        //console.log('uploading texture');
        $('#new_texture').submit();
      });
      
      //$('.recent-design-group').first().css('margin-left', '215px');
      $('.grid-design-group').first().css('margin-left', '242px');
      
      $('.style img').first().addClass('selected');
      front_mesh = $('.style .selected').data('mesh-front');
      back_mesh = $('.style .selected').data('mesh-back');

      style_id = $('.style .selected').data('form-id');
      
      $($('.texture-option')[0]).addClass('selected-texture');
      texture_file = $($('.texture-option')[0]).data('img');
      texture_id = $($('.texture-option')[0]).data('texture-id');
      
      init3DBuild(front_mesh, back_mesh, texture_file);
      $('#design-form').val(style_id);
      changeTexture(texture_file);
      $("#render-container").css('height', renderh);
    	$("#render-container").css('width', renderw);
      
      front_image.onload = function() {
        
        fillWhite(front_canvas)
        fillWhite(back_canvas)
        
        image_canvas.width = front_image.width;
        image_canvas.height = front_image.height;
        image_ctx.drawImage(front_image, 0,0);
        
        filter_canvas.width = front_image.width;
        filter_canvas.height = front_image.height;
        imgData=image_ctx.getImageData(0,0,image_canvas.width,image_canvas.height).data;
        pixelate(front_image, imgData, filter_ctx, 1);
        
        front_ctx.drawImage(filter_canvas, front_x,front_y);
        back_ctx.drawImage(filter_canvas, back_x,back_y);
        loadModelCanvas(front, front_canvas);
        loadModelCanvas(back, back_canvas);
        
        console.log("image load complete");
        $("#loading").hide();
      }
      

      image_canvas = document.getElementById("image-holder");
      image_ctx = image_canvas.getContext('2d');
      front_canvas = document.getElementById('front-texture')
      front_ctx = front_canvas.getContext('2d');
      back_canvas = document.getElementById('back-texture')
      back_ctx = back_canvas.getContext('2d');
      filter_canvas = document.getElementById('filtered');
      filter_ctx = filter_canvas.getContext('2d');
      
      edit_dx = getPositionLeft(front_canvas) - 5;
  		edit_dy = getPositionTop(front_canvas) - 5;
      
      document.onmousedown = function() {
        mousePressed = true;
      }
      document.onmouseup = function() {
        mousePressed = false;
      }

      front_canvas.onmousedown = function (evt) {
        edit_x = evt.pageX - edit_dx;
    		edit_y = evt.pageY - edit_dy;
    		
        evt.preventDefault();
        evt.stopPropagation();
        front_canvas.style.cursor = 'move';
        
        mousePressed = true;
      }

      front_canvas.onmousemove = function (e) {
       
        if (mousePressed) {
          edit_px = edit_x;
      		edit_py = edit_y;
          
          edit_x = e.pageX - edit_dx;
      		edit_y = e.pageY - edit_dy;
      	
      		front_x = front_x + (edit_x - edit_px);
      		front_y = front_y + (edit_y - edit_py);

      		front_ctx.clearRect(0,0,front_canvas.width, front_canvas.height);
      		fillWhite(front_canvas);
      		//front_ctx.drawImage(front_image, front_x,front_y);
      		front_ctx.drawImage(filter_canvas, front_x,front_y);
      		
      		loadModelCanvas(front, front_canvas);
        }
      }
      
      back_canvas.onmousedown = function (evt) {
        edit_dx = getPositionLeft(back_canvas) - 5;
    		edit_dy = getPositionTop(back_canvas) - 5;
        
        edit_x = evt.pageX - edit_dx;
    		edit_y = evt.pageY - edit_dy;
    		
        evt.preventDefault();
        evt.stopPropagation();
        back_canvas.style.cursor = 'move';
        
        mousePressed = true;
      }

      back_canvas.onmousemove = function (e) {
       
        if (mousePressed) {
          edit_px = edit_x;
      		edit_py = edit_y;
          
          edit_x = e.pageX - edit_dx;
      		edit_y = e.pageY - edit_dy;
      	
      		back_x = back_x + (edit_x - edit_px);
      		back_y = back_y + (edit_y - edit_py);

      		back_ctx.clearRect(0,0,back_canvas.width, back_canvas.height);
      		fillWhite(back_canvas);
      		back_ctx.drawImage(filter_canvas, back_x,back_y);
      		
      		loadModelCanvas(back, back_canvas);
        }
      }
      
      $('.close-button').click( function(){
        //$(this).parent().hide();
        $(this).parent().slideUp('slow');
      })
      
      $('#edit-button').click( function(){
        $('#editor').slideDown('slow');
      })
      
      $('#toggle-front').click( function(){
        $('.active-tab').removeClass('active-tab');
        $(this).addClass('active-tab');
        
        $('#front-texture').css('z-index', 5);
        $('#back-texture').css('z-index', 4);
      })
      $('#toggle-back').click( function(){
        $('.active-tab').removeClass('active-tab');
        $(this).addClass('active-tab');
        
        $('#front-texture').css('z-index', 4);
        $('#back-texture').css('z-index', 5);
      })
      
        $( "#pixel-slider" ).slider({
      			value:1,
      			min: 1,
      			max: 50,
      			step: 1,
      			slide: function( event, ui ) {
      			  if ($('input[name=filter]:checked').val()!='halftone') {
      			    pixelate(front_image, imgData, filter_ctx, ui.value);
    			    } else {
    			      halftone(front_image, imgData, filter_ctx, ui.value);
    			    }
    			    
      				refreshFront();
      				refreshBack();
      			},
      			change: function( event, ui ) {
      			  if ($('input[name=filter]:checked').val()!='halftone') {
      			    pixelate(front_image, imgData, filter_ctx, ui.value);
    			    } else {
    			      halftone(front_image, imgData, filter_ctx, ui.value);
    			    }
      				refreshFront();
      				refreshBack();
      			}
        });
      		
      		$('input[name=filter]').change( function(){
      		  var mode = $('input[name=filter]:checked').val();
      		  console.log(mode);
      		  if (mode == 'none') {
      		    $('#pixel-slider').hide();
      		    $("#pixel-slider").slider('value', 0);
      		    
    		    } 
    		    if (mode=='pixelate') {
    		      $("#pixel-slider").slider('value', 10);
    		      $('#pixel-slider').slideDown('fast');
    		    }
      		})
      
    });
    
    function refreshFront() {
      front_ctx.clearRect(0,0,front_canvas.width, front_canvas.height);
  		fillWhite(front_canvas);
  		front_ctx.drawImage(filter_canvas, front_x,front_y);
  		loadModelCanvas(front, front_canvas);
    }
    
    function refreshBack(){
      back_ctx.clearRect(0,0,back_canvas.width, back_canvas.height);
  		fillWhite(back_canvas);
  		back_ctx.drawImage(filter_canvas, back_x,back_y);
  		loadModelCanvas(back, back_canvas);
    }
    
    var edit_dx=0, edit_dy=0, edit_x=0, edit_y=0, edit_px=0, edit_py=0;
    var front_x=0, front_y=0, back_x=0, back_y=0;
    var mousePressed = false;
    
    function fillWhite(canvas) {
      var ctx = canvas.getContext('2d');
      ctx.beginPath();
  		ctx.rect(0,0, canvas.width, canvas.height);
  		ctx.fillStyle = 'white';
      ctx.fill();
    }
    
    function pixelate(img, data, ctx, pixel){
      //console.log("pixelating");
      ctx.beginPath();
      for (var y=pixel; y<img.height; y+=pixel) {
        for (var x=pixel; x<img.width; x+=pixel) {
          var i = ((img.width * y) + x) * 4;
          var r = data[i];
          var g = data[i+1];
          var b = data[i+2];
          ctx.fillRect(x-pixel, y-pixel, pixel, pixel);
          ctx.fill();  
          var color ="rgb("+r+","+g+","+b+")";
          filter_ctx.fillStyle = "rgb("+r+","+g+","+b+")";  
        }
      }
    }
    
    function halftone(img, data, ctx, pixel){
      console.log("halftone");
      ctx.beginPath();
      for (var y=pixel; y<img.height; y+=pixel) {
        for (var x=pixel; x<img.width; x+=pixel) {
          var i = ((img.width * y) + x) * 4;
          var r = data[i];
          var g = data[i+1];
          var b = data[i+2];
          circle(ctx, x, y-(pixel/2), pixel/2);
          ctx.fill();  
          var color ="rgb("+r+","+g+","+b+")";
          filter_ctx.fillStyle = "rgb("+r+","+g+","+b+")";  
        }
      }
    }
    
   function resetPixel() {
     $("#pixel-slider").slider('value', 0);
   }
   
   function circle(ctx, x, y, radius) {
     ctx.moveTo(x,y);
     ctx.arc(x,y,radius,0,2*Math.PI, true);  
   }
   
  </script>
<% end %>
<div id="my-closet">
</div>

<div >
  
  <div class="triangle-box"><span class="triangle-black"></span><h3>Constrvct A Look</h3></div>
  <div id="main-design">
    <div id="render-container">
    </div>
    <!--
    <div id="spin" style="display: none;">
      <%= image_tag "loading.gif" %>
    </div>
    -->
    <div id="loading">
      <strong>LOADING</strong>
    <span></span>
    </div>
    
  </div>
  
<div style="width: 420px; height:800px; float: left;position:relative; margin-left: 100px;">  
  <div id="style-picker">
    <h3 class="section-heading">Select Style</h3>
    <% Form.all.each do |style| %>
      <div class="style">
        <%= image_tag style.icon.url(:icon100), :'data-mesh-front' => style.front_mesh.url, :'data-mesh-back' => style.back_mesh.url, :'data-form-id' => style.id %>
      </div>
    <% end %>
  </div>
  
  <div id="artwork">
    <h3 class="section-heading">Add Artwork</h3>
    
    <%= form_for Texture.new, :remote => true, :id => 'texture-upload' do |f| %>
        <a class="button" id="upload-button"> Upload </a>
        <span>Use your own photo or image</span>
        <%= f.file_field :image, :style => 'display:none' %>
        <br />
        <a class="button" id="upload-image-button" style="display:none;"> Upload Image </a>
        
      <% end %>
      
    <div id="available-artwork">
      <div id="texture-picker">
      <% @textures.each do |texture| %>
          <%= image_tag texture.image.url(:thumb), :'data-texture-id' => texture.id, :'data-img' => texture.image.url(:v512), :class=>"texture-option" %>
      <% end %>
      </div>
      <a class="button" id="edit-button" > Edit </a>
    </div>
  </div>
  
  <div id="save-design">
  <%= form_for Design.new, :remote => true, :id => 'design-save' do |f| %>
    <%= f.hidden_field :texture_id, :id => 'design-texture' %>
    <%= f.hidden_field :form_id, :id => 'design-form' %>
    <%= f.hidden_field :image_data, :id => 'design-preview' %>
    <%= f.hidden_field :front_texture_data, :id => 'design-front-texture' %>
    <%= f.hidden_field :back_texture_data, :id => 'design-back-texture' %>
    <%= f.hidden_field :front_texture_x, :id => 'design-front-x' %>
    <%= f.hidden_field :front_texture_y, :id => 'design-front-y' %>
    <%= f.hidden_field :back_texture_x, :id => 'design-back-x' %>
    <%= f.hidden_field :back_texture_y, :id => 'design-back-y' %>
    
    <%= f.hidden_field :filter_name, :id => 'filter-name' %>
    <%= f.hidden_field :filter_params, :id => 'filter-params' %>

    <a id="save-button"><span class="circle"></span> Save Your Look </a>
    
    <div id="design-title-block">
      <label class="section-heading" style="display:table;">Title</label>
    <%= f.text_field :title, :placeholder => 'Title Your Look' %>
    </div>
  <% end %>
  </div>
  
  </div>
  
  <div id="editor" style="display: none;">
    <a class="close-button">x</a>
    <a class="button active-tab" id="toggle-front">front</a>
    <a class="button" id="toggle-back">back</a>
    
    <div id="canvas-container">
      <canvas id="front-texture" width=512 height=512></canvas>
      <canvas id="back-texture" width=512 height=512></canvas>
    </div>
    <span>drag to position image</span>
   
    <h3 class="section-heading" style="margin-top: 30px;">FILTER</h3>
    <input type="radio"  name="filter" value="none" checked/> none
    <input type="radio"  name="filter" value="pixelate"/> pixelate
    <!--
    <input type="radio"  name="filter" value="halftone"/> halftone
    -->
    <br />
    <div id="pixel-slider" style="display: none; margin-top: 15px; margin-left: 6px; margin-bottom: 5px; width: 200px;"></div>
    <span>filter amount</span>
  </div>
  <canvas id="image-holder" style="display: none;"> </canvas>
  <canvas id="filtered" width=512 height=512 style="display: none;"></canvas>
  

<div id="available-designs" style="margin-top: -100px;">
    
    <div class="triangle-box" style=" opacity: .6;"><span class="triangle-black"></span><h3 style="font-size: 17px;">Newest Constrvcts</h3></div>
    
    <div id="recent-designs">
    <% @designs.each do |design| %>
    <div class='grid-design-group'>
      <div class="design-unit">
      <%= link_to design do %>
        <%= image_tag design.preview.url(:thumb200) %>
      <% end %>
  
  <!--
    <div class="recent-design-group">
     <%= image_tag design.preview.url(:thumb200), :class =>'recent-design', :'data-mesh-front' => design.form.front_mesh.url, :'data-mesh-back' => design.form.back_mesh.url, :'data-form-id' => design.form.id, :'data-texture-file' => design.texture.image.url(:v512), :'data-texture-id' => design.texture.id, :'data-front-texture' => design.front_texture, :'data-back-texture' => design.back_texture, :'data-frontx' => design.front_texture_x, :'data-fronty' => design.front_texture_y, :'data-backx' => design.back_texture_x, :'data-backy' => design.back_texture_y %>
     -->
      <span>by <%= link_to design.user.username, design.user %></span>
    </div>  
    </div>
  <% end %>
   <div class="triangle-box" style="display: inline-block; position: relative; left:0px; top: -345px;"><a href="/designs"><span class="triangle-black"></span><h3 style="font-size: 17px;">All Constrvcts</h3></a></div>
  
  </div>
  
  </div>
</div>


<style>

</style>

<!--  
<script type="text/javascript" src='/assets/processingjs/processing-1.3.6.min.js'/>
<script type="application/processing" >
</script>
<canvas id="drawing" data-processing-sources="/assets/ptest.pde"  ></canvas>

<script>
 
function putDrawing() {
  var canvas = document.getElementById('drawing');
  loadCanvas(canvas); 
}
 
function stopDrawing() {
  var processing = Processing.getInstanceById('drawing');
  processing.noLoop();
}
function startDrawing() {
  var processing = Processing.getInstanceById('drawing');
  processing.loop();
}

</script>
-->